require("dotenv").config();

const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");
const cookie = require("cookie");
const jwt = require("jsonwebtoken");
const { Server } = require("socket.io");
const messageModel = require("../database/chatmodel.js");



const port = normalizePort(process.env.PORT || "8080");
app.set("port", port);

function escapeHtml(str) {
  if (typeof str !== "string") return str;

  return str
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: process.env.FRONTEND_URL,
    methods: ["GET", "POST"],
    credentials: true,
  },
});
const usersConnected = new Map();
io.on("connection", async (socket) => {
  const handshake = socket.handshake;
  console.log("New connection from: ", handshake.address);
  const cookies = cookie.parse(handshake.headers.cookie || "");
  if (!cookies.auth) {
    console.log("Unauthorized connection attempt");
    socket.disconnect();
    return;
  }

  const token = cookies.auth;
  let decoded;
  let email;
  try {
    decoded = jwt.verify(token, process.env.JWT);
    socket.data.email = decoded.email;
    email = socket.data.email
    console.log("User authenticated: ", email);
    const num = usersConnected.get(email) || 0;
    const numAdded = num + 1
    usersConnected.set(email, numAdded)
    console.log("users connected:" , usersConnected)
    io.emit("users connected", [...usersConnected.keys()])
    socket.emit(
      "chat message",
      await messageModel.find({}).sort({ createdAt: 1 }).limit(20)
    );
    socket.on("chat message", async (msg) => {
      if (!msg || msg.trim() === "" || msg.trim().length > 70) {
        console.log("Bad message, ignoring.");
        return;
      }

      const newMessage = new messageModel({
        email: email,
        text: escapeHtml(msg.trim()),
      });

      await newMessage.save();
      const amount = await messageModel.countDocuments();
      if (amount > 20) {
        const toDelete = await messageModel
          .find()
          .sort({ createdAt: 1 })
          .limit(amount - 20);
        await messageModel.deleteMany({
          _id: { $in: toDelete.map((doc) => doc._id) },
        });
        console.log("Deleted old messages.");
      }

      const message = await messageModel
        .find({})
        .sort({ createdAt: -1 })
        .limit(20);
      console.log(message);
      io.emit("chat message", message.reverse());
    });
  } catch (error) {
    console.log("Invalid token: ", error.message);
    socket.disconnect();
  }
  socket.on("request users connected" , () => {
    socket.emit("users connected", [...usersConnected.keys()]);
  })
  socket.on("disconnect", () => {
    setTimeout(() => {
    const count = (usersConnected.get(email) || 0) - 1
    if(count > 0){
      usersConnected.set(email, count)
    }
    else{
      usersConnected.delete(email)
    }
    console.log("User disconnected: ", socket.id);
    console.log("users connected:" , usersConnected)
    io.emit("users connected", [...usersConnected.keys()])
  }, 50)
  });
});

server.listen(port, () => {
  console.log("Server listening on " + port);
});
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
