require("dotenv").config();
const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");
const jwt = require("jsonwebtoken");
const { Server } = require("socket.io");
const messageModel = require("../database/chatmodel.js");
const userModel = require("../database/usermodel.js");
const bannedIps = require("../database/bannedips.js");
const port = normalizePort(process.env.PORT || "8080");
app.set("port", port);
//functions
async function addColors(arr) {
  return await Promise.all(
    arr.map(async (item) => {
      const user = (await userModel.findOne({ email: item.email })) || 0;
      return { ...item.toObject(), color: user?.color || "lightgray" };
    })
  );
}
function escapeHtml(str) {
  if (typeof str !== "string") return str;

  return str
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: process.env.FRONTEND_URL,
    methods: ["GET", "POST"],
    credentials: true,
  },
});
function checkIfBanned(email) {
  return new Promise(async (resolve, reject) => {
    try {
      const user = await userModel.findOne({ email: email });
      const isIpBanned = await bannedIps.findOne({ ip: user.ip });
      if (user.banned || isIpBanned?.banned) {
        resolve(true);
      } else {
        resolve(false);
      }
    } catch (err) {
      reject(err);
    }
  });
}

const usersConnected = new Map();
function sendUsersConnectedToRoom() {
  const usersOnlineMap = new Map();
  for (let x of [...usersConnected.keys()]) {
    const id = [...usersConnected.get(x).roomId];
    for (let idd of id) {
      if (!usersOnlineMap.has(idd)) {
        usersOnlineMap.set(idd, new Set());
      }
      usersOnlineMap.get(idd).add(x);
    }
  }
  for (let [x, y] of usersOnlineMap.entries()) {
    io.to(x).emit("users connected", [...y]);
  }
}

io.on("connection", async (socket) => {
  // <validating user
  let email;
  try {
    const handshake = socket.handshake;
    console.log(
      "New connection from: ",
      handshake.address,
      "cookies: ",
      !!handshake.auth
    );
    if (!handshake.auth) throw new Error("No authentication given.");
    console.log(handshake.auth);
    const token = handshake.auth.auth || "";
    if (!token) {
      console.log("Unauthorized connection attempt");
      socket.disconnect();
      return;
    }
    const decoded = jwt.verify(token, process.env.JWT);
    socket.data.email = decoded.email;
    email = socket.data.email;
    if (!email) {
      throw new Error("No email detected. Disconnecting");
    }
    const isBanned = await checkIfBanned(email);
    if (isBanned) {
      console.log("Banned user tried to connect: ", email);
      return socket.disconnect();
    }
    console.log("User authenticated: ", email);

    console.log("users connected:", usersConnected);
  } catch (err) {
    console.error("Error occurred. Error: ", err);
    socket.disconnect();
    return;
  }
  //>
  async function joinRoomHandler(roomId) {
    roomId = String(roomId).toLowerCase();
    socket.join(roomId);
    const num = usersConnected.get(email)?.numOfConnected || 0;
    const set = usersConnected.get(email)?.roomId || new Set();
    const numAdded = {
      numOfConnected: num + 1,
      roomId: new Set([...set, roomId]),
    };
    usersConnected.set(email, numAdded);
    socket.data.roomId = roomId;
    socket.emit(
      "chat message",
      await addColors(
        await messageModel
          .find({ roomId: socket.data.roomId })
          .sort({ createdAt: 1 })
          .limit(70)
      )
    );
    io.emit("users online", [...usersConnected.keys()].length);
    sendUsersConnectedToRoom();
  }
  async function chatMessageHandler(msg) {
    const roomId = socket.data.roomId;
    if (!roomId) return console.log("No roomId yet.");
    if (
      (!msg || msg.trim() === "" || msg.trim().length > 100) &&
      !(/:bypass/i.test(msg) || msg.match(/image\((.*?)\)/i))
    ) {
      console.log("Bad message, ignoring.");
      return;
    }
    const newMessage = new messageModel({
      email: email,
      text: escapeHtml(msg.trim().replace(/:bypass/gi, "")) || " ",
      roomId: roomId || "main",
    });

    await newMessage.save();
    const amount = await messageModel.countDocuments({ roomId: roomId });
    if (amount > 70) {
      const toDelete = await messageModel
        .find({ roomId: roomId })
        .sort({ createdAt: 1 })
        .limit(amount - 70);
      await messageModel.deleteMany({
        _id: { $in: toDelete.map((doc) => doc._id) },
      });
      console.log("Deleted old messages.");
    }

    const message = await messageModel
      .find({ roomId: roomId })
      .sort({ createdAt: 1 })
      .limit(70);
    const messages = await addColors(message);
    console.log(messages);
    io.to(roomId).emit("chat message", messages);
  }
  function requestUsersOnlineHandler() {
    const roomId = socket.data.roomId;
    if (!roomId) return console.log("No room Id yet.");
    socket.emit(
      "users connected",
      [...usersConnected.keys()].filter((item) =>
        (usersConnected.get(item)?.roomId || new Set(["main"])).has(roomId)
      )
    );
  }
  function disconnectHandler() {
    socketCleanUp(socket);
    const count = (usersConnected.get(email)?.numOfConnected || 0) - 1;
    if (count > 0) {
      usersConnected.set(email, {
        ...usersConnected.get(email),
        numOfConnected: count,
      });
    } else {
      usersConnected.delete(email);
    }
    console.log("User disconnected: ", socket.id);
    console.log("users connected:", usersConnected);
    sendUsersConnectedToRoom();
    io.emit("users online", [...usersConnected.keys()].length);
  }

  function socketCleanUp(socket) {
    socket.off("join room", joinRoomHandler);
    socket.off("chat message", chatMessageHandler);
    socket.off("request users connected", requestUsersOnlineHandler);
  }

  socket.on("join room", joinRoomHandler);

  //sends user info to the specific room

  socket.on("chat message", chatMessageHandler);
  socket.on("request users connected", requestUsersOnlineHandler);

  socket.on("disconnect", disconnectHandler);
});
server.listen(port, () => {
  console.log(
    "Server listening on " + port,
    `origin: ${process.env.FRONTEND_URL}`
  );
});
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
